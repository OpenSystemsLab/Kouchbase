{"name":"Kouchbase","tagline":"a ORM like library for Couchbase - Kohana 3.2","body":"# Kouchbase #\r\n\r\n\r\nA ORM like library for [Couchbase](http://couchbase.com/ \"Couchbase Server\") & [Kohana](http://kohanaframework.org \"Kohana PHP Framework\") 3.2, impressed by [Sprig](http://github.com/sittercity/sprig \"A database modeling system for the Kohana framework\") and some other Kohana ORM modules.\r\n\r\n**This project is under development, use it as your own risk!**\r\n\r\n## Quick Start ##\r\n\r\nEach model must:\r\n\r\n- Extend the `Kouchbase` class\r\n- Define a protected `_init()` method and set the field mappings\r\n\r\nExample of a model:\r\n\r\n    class Model_Player extends Kouchbase {\r\n\r\n        protected function _init()\r\n        {\r\n            'first_name' => new Kouchbase_Field_Char(array(\r\n                'min_length' => 2,\r\n                'max_length' => 100,\r\n                'label' => 'First Name',\r\n            )),\r\n            'last_name' => new Kouchbase_Field_Char(array(\r\n                'min_length' => 2,\r\n                'max_length' => 100,\r\n                'label' => 'Last Name',\r\n                'default' => ''\r\n            )),\r\n        }\r\n    }\r\n\r\n## Interacting with models ##\r\n\r\nLoading models is done with the `Kouchbase::factory($name)` method:\r\n    \r\n    $player = Kouchbase::factory('player');\r\n\r\nLoading models by calling new `Model_Player` will not work! You must use the `factory()` method.\r\n\r\n## Data ##\r\n\r\nModel data is read using object properties:\r\n\r\n    $first_name = $player->first_name;\r\n    $last_name  = $player->last_name;\r\nModel data is changed the same way:\r\n\r\n    $player->first_name = 'My First Name';\r\n\r\nYou can also use the `load_values()` method set many fields using an associative array:\r\n\r\n    $player->load_values(array(\r\n        'first_name' => 'FN',\r\n    ));\r\n\r\n## Create, Read, Update, and Delete (CRUD) ##\r\n\r\nReading records is done by setting the search values, then calling the `load()` method:\r\n\r\n    $player = Kouchbase::factory('player');\r\n    $player->load(5);\r\n\r\n    if ($player->loaded())\r\n    {\r\n        // Do something with the player\r\n    }\r\n\r\nIt is also possible to pre-populate the model using an array of values:\r\n\r\n    $player = Kouchbase::factory('player', array('id' => 10))->load();\r\n\r\nCreating new records & Update extsting record is done using the `save()` method:\r\n\r\n    $player = Kouchbase::factory('player', array(\r\n        'first_name'     => 'FN',\r\n        'last_name'      => 'LN',\r\n    ));\r\n\r\n    // Create a new player\r\n    $player->save();\r\n\r\nIf the model data does not satisfy the validation requirements, a `Validate_Exception` will be thrown. This exception should be caught and used to show the end user the error messages:\r\n\r\n    try\r\n    {\r\n        // Create a new player\r\n        $player->save();\r\n    }\r\n    catch (Validate_Exception $e)\r\n    {\r\n        // Get the errors using the Validate::errors() method\r\n        $errors = $e->array->errors('player');\r\n    }\r\n\r\nDeleting a record is done using the `delete()` method:\r\n\r\n    $player->delete();\r\n\r\n## Field Object Reference ##\r\n\r\nAccessing a field object is done using the `field()` method:\r\n\r\n    $first_name = $player->field('first_name');\r\nAn array of fields can be accessed using the fields() method:\r\n\r\n    $fields = $player->fields();\r\n\r\n### Types of fields ###\r\n\r\nKOuchbase offers most database column types as classes. Each field must extend the `Kouchbase_Field` class. Each field has the following properties:\r\n\r\n`empty` : Allow `empty()` values to be used. Default is `FALSE`.\r\n\r\n`unique` : This field must have a unique value within the model table. Default is `FALSE`.\r\n\r\n`null` : Convert all `empty()` values to `NULL`. Default is `FALSE`.\r\n\r\n`editable` : Show the field in forms. Default is `TRUE`.\r\n\r\n`default` : Default value for this field. Default is '' (an empty string).\r\n\r\n`label` : Human readable label. Default will be the field name converted with `Inflector::humanize()`.\r\n\r\n`description` : Description of the field. Default is '' (an empty string).\r\n\r\n`filters` : Validate filters for this field.\r\n\r\n`rules` : Validate rules for this field.\r\n\r\n#### Kouchbase_Field_Boolean #####\r\n\r\nA boolean (TRUE/FALSE) field, representing by a checkbox.\r\n\r\nImplies `empty = TRUE` and `default = FALSE`.\r\n\r\n#### Kouchbase_Field_Char #####\r\n\r\nA single line of text, represented by a text input.\r\n\r\nAlso has the `min_length` and `max_length` properties.\r\n\r\n\r\n#### Kouchbase_Field_Float #####\r\n\r\nA float or decimal number, represented by a text input.\r\n\r\nAlso has the `places` property.\r\n\r\n#### Kouchbase_Field_Integer #####\r\n\r\nAn integer number, represented with a text input (or a select input, if the choices property is set).\r\n\r\nAlso has the `min_value` and `max_value` properties.\r\n\r\n#### Kouchbase_Field_Text #####\r\n\r\nA large block of text, represented by a textarea.\r\n\r\n#### Kouchbase_Field_O2O ####\r\n\r\nnot implement, use `Kouchbase_Field_O2M` instead\r\n\r\n#### Kouchbase_Field_M2O ####\r\n\r\nA reference to another model by the child model `id` value.\r\n\r\nHas the `model` property, the name of another Kouchbase model.\r\n\r\n#### Kouchbase_Field_O2M #####\r\n\r\nA reference to many other models by this model `id` value\r\n\r\nHas the `model` property, the name of another Kouchbase model.\r\n\r\n#### Kouchbase_Field_M2M #####\r\nNot implement yet\r\n\r\n## One To Many Relations ##\r\nThere's a few ways to add and remove one to many relations. The first is to use the raw field names:\r\n\r\n    $player->plants = array(1, 2, 3);\r\nThis will completely overwrite all the relationships for this model. The only relations to this model will be 1, 2 and 3.\r\n\r\nThe second way is to use the `add_relation()` and `remove_relation()` methods:\r\n\r\n    $player->add_relation('plants', 1);\r\nYou can also pass an object:\r\n\r\n    $player->add_relation('plants', $plant);\r\nOr an array of ids:\r\n    $player->add_relation('plants', array(1, 2, 3);\r\n\r\nOr an array of objects!\r\n\r\n    $player->add_relation('plants', array($plant1, $plant2, $plant3);\r\n\r\n### Removing Relations ###\r\n\r\nTo remove a relation, use the same techniques as above.\r\n\r\n    $player->plants = array(1,2,3)\r\nThis will completely overwrite all the relationships for this model. The only relations to this model will be 1, 2 and 3.\r\n\r\nUse `remove_relation()` instead of `add_relation()`:\r\n\r\n    $player->remove_relation('plants', 1);\r\nYou can also pass an object:\r\n\r\n    $player->remove_relation('plants', $plant);\r\nOr an array of ids:\r\n\r\n    $player->remove_relation('plants', array(1, 2, 3);\r\nOr an array of objects!\r\n\r\n    $player->remove_relation('plants', array($plant1, $plant2, $plant3);\r\n","google":"UA-15252221-9","note":"Don't delete this file! It's used internally to help with page regeneration."}